generator client {
  provider = "prisma-client-js"
  seed     = "prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TipoCatraca {
  ENTRADA
  SAIDA
  BLOQUEIO
}

enum StatusMensalidade {
  PENDENTE
  PAGO
  CANCELADO
  ATRASADO
}

enum FormPagamento {
  DINHEIRO
  CARTAO
  PIX
  GRATIS
}

model Cliente {
  id             Int      @id @default(autoincrement())
  nome           String
  email          String   @unique
  telefone       String?
  dataNascimento DateTime @default(now()) @map("data_nascimento")
  diaMensalidade Int?     @map("dia_mensalidade")
  catracaId      Int?     @unique @map("catraca_id")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  planoId        Int      @map("plano_id")
  ativo          Boolean  @default(true)

  plano          Plano            @relation(fields: [planoId], references: [id])
  Mensalidade    Mensalidade[]
  RegistroAcesso RegistroAcesso[]
  LogSistema     LogSistema[]

  @@map("clientes")
}

model Usuario {
  id            Int      @id @default(autoincrement())
  nome          String
  email         String   @unique
  senha         String
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  ativo         Boolean  @default(true)
  administrador Boolean  @default(false) @map("administrador")

  LogSistema LogSistema[]

  @@map("usuarios")
}

model Plano {
  id        Int      @id @default(autoincrement())
  nome      String
  descricao String?
  valor     Float
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Cliente Cliente[]

  @@map("planos")
}

model Mensalidade {
  id             Int               @id @default(autoincrement())
  clienteId      Int               @map("cliente_id")
  valor          Float
  vencimento     DateTime
  status         StatusMensalidade @default(PENDENTE)
  formaPagamento FormPagamento?    @map("forma_pagamento")
  valorPago      Float?            @map("valor_pago")
  dataPagamento  DateTime?         @map("data_pagamento")
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @updatedAt @map("updated_at")

  cliente Cliente @relation(fields: [clienteId], references: [id])

  @@map("mensalidades")
}

model PagamentoAvulso {
  id             Int           @id @default(autoincrement())
  nomeCliente    String?       @map("nome_cliente")
  valor          Float
  formaPagamento FormPagamento @map("forma_pagamento")
  dataHora       DateTime      @default(now()) @map("data_hora")
  observacao     String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("pagamentos_avulsos")
}

model RegistroAcesso {
  id          Int         @id @default(autoincrement())
  clienteId   Int         @map("cliente_id")
  tipoCatraca TipoCatraca @map("tipo_catraca")
  dataHora    DateTime    @default(now()) @map("data_hora")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  cliente Cliente @relation(fields: [clienteId], references: [id])

  @@map("registros_acesso")
}

model LogSistema {
  id        Int    @id @default(autoincrement())
  usuarioId Int    @map("usuario_id")
  acao      String
  clienteId Int?   @map("cliente_id")

  dataHora DateTime @default(now()) @map("data_hora")

  usuario Usuario  @relation(fields: [usuarioId], references: [id])
  cliente Cliente? @relation(fields: [clienteId], references: [id])

  @@map("logs_sistema")
}

model CatracaInfo {
  id            Int     @id
  ip            String  @unique
  porta         Int     @unique
  tipo          Int?
  conectado     Boolean @default(false)
  conexaoManual Boolean @default(false) @map("conexao_manual")
  networkName   String  @map("network_name")

  @@map("catracas_info")
}
